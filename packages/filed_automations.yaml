
################################################
## Customize
################################################
homeassistant:
  customize:
    ################################################
    ## Node Anchors
    ################################################
    package.node_anchors:
      customize: &customize
        package: 'filed_automations'

sensor:
  - platform: file
    file_path: /config/filed_automations.txt
    name: Filed automations


  # Syncthing (REST, requires GUI address '0.0.0.0:8384' and API Key)
  # Version information
  - platform: rest
    name: syncthing_version
    resource: https://alien.seedhost.eu/torn8oseed/syncthing/
    headers:
      X-API-Key: !secret syncthing_api_key
    json_attributes:
      - version
      - longVersion
      - os
      - arch
    value_template: '{{ value_json.version }}'
    scan_interval: 300

# Connection information
  - platform: rest
    name: syncthing_connections
    resource: https://alien.seedhost.eu/torn8oseed/syncthing/
    headers:
      X-API-Key: !secret syncthing_api_key
    json_attributes:
      - connections
      - total
    # Don't read sensor value (it's the OLD last one!) but update directly from JSON
    #value_template: "{{ states.sensor.syncthing_connections.attributes.connections.values() | selectattr('connected') | list | length }}"
    value_template: "{{ value_json.connections.values() | selectattr('connected') | list | length }}"
    scan_interval: 300

# Status information
  - platform: rest
    name: syncthing_status
    resource: https://alien.seedhost.eu/torn8oseed/syncthing/
    headers:
      X-API-Key: !secret syncthing_api_key
    json_attributes:
      - myID
      - startTime
      - uptime
      - alloc
    # Don't read sensor value (it's the OLD last one!) but update directly from JSON
    #value_template: "{{ (states.sensor.syncthing_status.attributes.uptime / 86400) | round(0) | int }}"
    value_template: "{{ (value_json.uptime / 86400) | round(0) | int }}"
    unit_of_measurement: 'd'
    scan_interval: 300

# Info "sensor" that aggregates info from above REST sensors
  - platform: template
    sensors:
      syncthing_info:
        # force update if any of these change
        entity_id:
          - binary_sensor.syncthing
          - sensor.syncthing_version
          - sensor.syncthing_status
          - sensor.syncthing_connections
        value_template: "{{ states('binary_sensor.syncthing') }}"
        # aggregate some useful info from the other sensors
        attribute_templates:
          my_ID: "{{ state_attr('sensor.syncthing_status', 'myID') }}"
          version: "{{ state_attr('sensor.syncthing_version', 'version') }}"
          version_long: "{{ state_attr('sensor.syncthing_version', 'longVersion') }}"
          os: "{{ state_attr('sensor.syncthing_version', 'os') }}"
          arch: "{{ state_attr('sensor.syncthing_version', 'arch') }}"
          # must subtract 1 because own machine is also in connections, albeit always disconnected
          connections_total: "{{ state_attr('sensor.syncthing_connections', 'connections') | length - 1 }}"
          # selectattr('connected') is the same as selectattr('connected', 'equalto', True)
          connections_active: "{{ states.sensor.syncthing_connections.attributes.connections.values()|selectattr('connected')|list|length }}"
          total_bytes_in: "{{ state_attr('sensor.syncthing_connections', 'total')['inBytesTotal'] }}"
          total_bytes_out: "{{ state_attr('sensor.syncthing_connections', 'total')['outBytesTotal'] }}"
          start_time: "{{ as_timestamp(state_attr('sensor.syncthing_status', 'startTime')) | timestamp_custom() }}"
          uptime: "{{ states('sensor.syncthing_status') }}"
          memory_usage: "{{ state_attr('sensor.syncthing_status', 'alloc') }}"


notify:
  - name: filed_automations
    platform: file
    filename: filed_automations.txt

automation:
  - alias: Automation ran
    id: 'Automation ran'
  #  initial_state: 'off'
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: template
      value_template: >
        {% set skip_list = ['automation_ran', 'count_warnings', 'count_errors',
                             'activate_map_sensors_actueel', 'call_family_home',
                             'timed_python_scripts_per_20_secs'] %}
        {{ trigger.event.data.entity_id.startswith('automation.') and
           trigger.event.data.entity_id.split('.')[1] not in skip_list and
           'old_state' in trigger.event.data and 'new_state' in trigger.event.data }}
    action:
      - condition: template
        value_template: >
          {{ trigger.event.data.new_state.attributes.last_triggered !=
             trigger.event.data.old_state.attributes.last_triggered }}
      - service: notify.filed_automations
        data_template:
          message: >
           {{ as_timestamp(trigger.event.data.new_state.last_updated)|timestamp_custom('%d %b: %X') }}: {{ trigger.event.data.new_state.name }}
      - service: python_script.last_automation
        data_template:
          event: '{{ trigger.event }}'

binary_sensor:

  # Syncthing (REST, requires GUI address '0.0.0.0:8384' and API Key)
  - platform: rest
    name: syncthing
    resource: https://alien.seedhost.eu/torn8oseed/syncthing/
    headers:
      X-API-Key: !secret syncthing_api_key
    value_template: '{{ value_json.ping == "pong" }}'
    device_class: connectivity

